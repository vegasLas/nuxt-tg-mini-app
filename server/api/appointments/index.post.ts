import { PrismaClient } from '@prisma/client'
import type { Appointment } from '~/types'
import { getUserFromEvent } from '../../utils/getUserFromEvent'
import { startOfDay, endOfDay, format } from 'date-fns'
const prisma = new PrismaClient()

export default defineEventHandler(async (event) => {
  try {
    const user = await getUserFromEvent(event);
    if (!user) {
    throw createError({ statusCode: 401, statusMessage: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });
  }

  const isAdmin = await isAdminUser(event);
  const { time } = await readBody(event) as Omit<Appointment, 'id' | 'user' | 'userId'>;
  const appointmentDate = parseToMoscowTime(time);
  
  // Check if the appointment time falls within a disabled day range
  const disabledTime = await prisma.disabledTime.findFirst({
    where: {
      date: {
        gte: startOfDay(appointmentDate),
        lte: endOfDay(appointmentDate)
      },
      slot: appointmentDate
    }
  });

  if (disabledTime) {
    throw createError({
      statusCode: 403,
      statusText: '–í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.'
    });
  }

  const activeAppointmentsCount = await prisma.appointment.count({
    where: {
      userId: user.id,
      booked: true,
      time: { gt: new Date() }
    }
  });

  if (activeAppointmentsCount >= 2 && !isAdmin) {
    throw createError({
      statusCode: 403,
      statusText: '–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å 2 –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –Ω–∏—Ö, –ø—Ä–µ–∂–¥–µ —á–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—É—é.'
    });
  }

  const existingAppointment = await prisma.appointment.findFirst({
    where: {
      time: appointmentDate,
      booked: true,
      userId: user.id
    }
  });

  if (existingAppointment) {
    throw createError({
      statusCode: 409,
      statusText: '–ù–∞ —ç—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.'
    });
  }

  const createData = await readBody(event) as Omit<Appointment, 'id' | 'user' | 'userId'>;
  const newAppointment = await prisma.appointment.create({
    select: {
      id: true,
      name: true,
      phoneNumber: true,
      comment: true,
      time: true,
      booked: true,
      userId: true
    },
    data: {
      ...createData,
      userId: user.id
    }
  });

  // Add notification to user
  if (user.chatId) {
    const message = [
        `‚úÖ ${isAdmin ? '–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞' : '–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å'}`,
        newAppointment.name ? `üë§ –ò–º—è: ${newAppointment.name}` : '',
        newAppointment.phoneNumber ? `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${newAppointment.phoneNumber}` : '',
        newAppointment.time ? `üìÖ –ß–∏—Å–ª–æ: ${format(newAppointment.time, 'dd.MM.yyyy')}` : '',
        newAppointment.time ? `‚è∞ –í—Ä–µ–º—è: ${format(newAppointment.time, 'HH:mm')}` : '',
        newAppointment.comment ? `üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${newAppointment.comment}` : ''
      ].filter(Boolean).join('\n');
    TBOT.sendMessage(user.chatId, message).catch(error => {
      console.error('Error sending confirmation message to user:', error)
    })
  }

  // Fetch all admin users
  const admins = await prisma.admin.findMany({
    include: {
      user: true, // Includes the related User
    },
  })

  // Prepare the message
  if (!isAdmin) {
    const message = `üîî –ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–ª –∑–∞–ø–∏—Å—å\n${newAppointment.name ? `üë§ –ò–º—è: ${newAppointment.name}\n` : ''}${newAppointment.phoneNumber ? `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${newAppointment.phoneNumber}\n` : ''}${newAppointment.time ? `üìÖ –ß–∏—Å–ª–æ: ${format(newAppointment.time, 'dd.MM.yyyy')}\n` : ''}${newAppointment.time ? `‚è∞ –í—Ä–µ–º—è: ${format(newAppointment.time, 'HH:mm')}\n` : ''}${newAppointment.comment ? `üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${newAppointment.comment}\n` : ''}`
    admins.forEach(async (admin) => {
      if (admin.user.telegramId && admin.user.chatId) {
        TBOT.sendMessage(admin.user.chatId , message).catch(error => {
          console.error('Error sending message to admin after creating appointment:', error)
        })
      }
    })
  }
  return newAppointment
  } catch (error) {
    console.error('Error creating appointment:', error)
    throw createError({ statusCode: 500, statusMessage: 'Internal Server Error' })
  }
});
